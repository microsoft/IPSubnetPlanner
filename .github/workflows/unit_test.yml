name: Unit Test

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.20', '1.21']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Get dependencies
      run: |
        cd src
        go mod download

    - name: Run tests
      run: |
        cd src
        go test -v -race -timeout 5m

    - name: Run tests with coverage
      run: |
        cd src
        go test -v -coverprofile=coverage.out -covermode=atomic

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v4
      with:
        file: ./src/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Display coverage
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      run: |
        cd src
        go tool cover -func=coverage.out

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run benchmarks
      run: |
        cd src
        go test -bench=. -benchmem -run=^$ > benchmark.txt
        cat benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: src/benchmark.txt
        retention-days: 30
